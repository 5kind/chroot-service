name: Build Magisk Module

on:
  push:
    branches:
      - master
    paths:
      - 'module.prop'
  workflow_dispatch:
      
permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Set up the environment
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      # Step 1.5: Build the module
      - name: Build module
        run: |
          sudo apt-get update
          sudo apt-get install -y asciidoc-base
          echo "Building the module..."
          chmod +x common/make.sh
          ./common/make.sh

      # Step 2: Calculate, Validate, and Update Versions
      - name: Calculate, Validate, and Update Versions
        id: versioning
        run: |
          echo "--- Starting Versioning Process ---"
          
          # 1. Read manually maintained version name from module.prop
          prop_version=$(grep 'version=' module.prop | sed 's/.*=//')
          echo "Found manual version name: ${prop_version}"
          echo "module_version=${prop_version}" >> $GITHUB_ENV

          # 2. Automatically calculate new versionCode
          echo "Calculating total commits..."
          main_commits=$(git rev-list --count HEAD)
          sub_commits=$(git submodule foreach --quiet 'git rev-list --count HEAD' | awk '{s+=$1} END {print s}')
          # New versionCode = main repo commits + submodule commits + 1 (for this version bump commit)
          new_version_code=$((main_commits + sub_commits + 1))
          echo "Calculation: ${main_commits}(main) + ${sub_commits}(submodules) + 1(this commit) = ${new_version_code}"
          echo "New versionCode: ${new_version_code}"

          # 3. Write new versionCode back to module.prop
          echo "Updating module.prop..."
          sed -i "s/^versionCode=.*/versionCode=${new_version_code}/" module.prop
          
          # 4. Update update.json
          echo "Updating update.json..."
          expected_zip_url="https://github.com/${{ github.repository }}/releases/download/${prop_version}/install.zip"
          
          jq \
            --arg ver "$prop_version" \
            --argjson code "$new_version_code" \
            --arg url "$expected_zip_url" \
            '.version = $ver | .versionCode = $code | .zipUrl = $url' \
            update.json > update.json.tmp && mv update.json.tmp update.json
            
          echo "update.json has been updated successfully."

          # 5. Check if there are file changes and set output variable
          # Use git status --porcelain to accurately detect file modifications
          if [[ -n $(git status --porcelain) ]]; then
            echo "Changes detected in module.prop or update.json. A commit is needed."
            echo "NEEDS_COMMIT=true" >> $GITHUB_ENV
          else
            echo "No version changes needed. Files are up to date."
            echo "NEEDS_COMMIT=false" >> $GITHUB_ENV
          fi
      
      # Step 2.5: Commit all changes if needed
      - name: Commit and Push All Changes
        if: steps.versioning.outputs.NEEDS_COMMIT == 'true' || env.NEEDS_COMMIT == 'true' # Compatible with both output and env variable
        run: |
          echo "Committing all detected changes..."
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          # Use git add -A to stage all changes (additions, modifications, deletions)
          git add -A
          git commit -m "ci: Bump versionCode to ${{ env.prop_version_code_new }} and update files" -m "Total commits: ${{ env.total_commits }}"
          git push

      # Step 3: Package module files
      - name: Package Module to install.zip
        run: |
          echo "Packaging module..."
          zip_exclude_args=()
          if [ -f ".gitignore" ]; then
            echo "Found .gitignore, adding it to exclusions."
            zip_exclude_args+=("-x@.gitignore")
          fi
          if [ -f ".zipignore" ]; then
            echo "Found .zipignore, adding it to exclusions."
            zip_exclude_args+=("-x@.zipignore")
          fi
          # Package all module-related files into install.zip
          echo "Running zip command with exclusions: ${zip_exclude_args[@]}"
          zip -r install.zip . ${zip_exclude_args[@]}

      # Step 4: Create GitHub Release and upload install.zip
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # Use the version from module.prop as the Release tag and title
          tag_name: ${{ env.module_version }}
          name: Release ${{ env.module_version }}
          # Files to upload
          files: install.zip
          # Uncomment the line below if you want this to be a draft Release
          # draft: true
          # Uncomment the line below if you want this to be a prerelease
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}